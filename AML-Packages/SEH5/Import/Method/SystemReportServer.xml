<AML>
 <Item type="Method" id="36F4F7B50ECA42BE902B71CB084A3FD7" action="add">
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[Innovator innov = this.getInnovator();

Item itemExists(string itemType, string itemId, string select) {
    Item item = this.newItem(itemType);
    item.setID(itemId);
    item.setAttribute("select", select);
    Item res = item.apply("get");
    if (!res.isError()) return res;
    else return null;
}
// step 1, get ids of structure for system
string this_type = this.getType();
string system_id;
if (this_type == "sys_System") system_id = this.getID(); // called by show_se_process_report
else  system_id = this.getProperty("system_id"); // called by show_se_process_report2 Dashboard generic method

bool debug = true;
if (debug == true)
{
    //if (System.Diagnostics.Debugger.Launch()) System.Diagnostics.Debugger.Break();
    //system_id = "51C1A8056B884BCFB63128C5022218C2"; // System 1
    system_id = "6F06F01EEF60483BA917182494764576"; // System 2
}

string aml1 = @"<AML>
    <Item type='sys_System' action='GetItemRepeatConfig' id='{system_id}' >
        <Relationships>
            <Item type='sys_System Breakdown' action='get'  repeatProp='related_id' repeatTimes='0' />
        </Relationships>
    </Item>
</AML>";
Item res1 = innov.applyAML(aml1.Replace("{system_id}",system_id));
// return innov.newResult(aml1.Replace("{system_id}",system_id));
//return res1;
string id_list = "'" + system_id + "'";
Item element_ids = res1.getItemsByXPath("//Item[@type='sys_System Breakdown']");
for (int i = 0; i < element_ids.getItemCount(); i++)
{
	Item this_item = element_ids.getItemByIndex(i);
	id_list += ",'" + this_item.getProperty("related_id" ) + "'";
}
// if (debug) return innov.newResult(id_list);
// step 2 get processes for system
string aml2 = @"<AML>
    <Item type='SE Process' action='get' select='item_number,name'>
        <system_id condition='in'>{id_list}</system_id>
        <Relationships>
            <Item type='SE Input'  action ='get' select='is_applicable, se_io_id,  se_controlled_item_id(keyed_name,name)' >            
            </Item>
            <Item type='SE Output' action ='get' select='is_applicable, se_io_id, se_controlled_item_id(keyed_name,name)' >
            </Item>
        </Relationships>
    </Item>
</AML>";
aml2 = aml2.Replace(@"{id_list}",id_list);
//return innov.newResult(aml2);
Item res2 = innov.applyAML(aml2);

// step 3 define nodes and edges for thread diagram, as dot language
StringBuilder dot = new StringBuilder("");
// 3.1 create Dot language for SE Process nodes
Item process_nodes = res2.getItemsByXPath("//Item[@type='SE Process']");
// return process_nodes;
for (int i = 0; i < process_nodes.getItemCount(); i++)
{
    Item this_process = process_nodes.getItemByIndex(i);
    string nickname = "x" + this_process.getID();
    string keyed_name = this_process.getProperty("item_number") + "\r\n" + this_process.getProperty("name");
    string this_node = $"{nickname}  [shape=box,style=filled,fontname=\"Segoe UI\",fillcolor=chartreuse,label=\"{keyed_name}\"];\r\n";
    dot.Append(this_node);
}
// 3.2 create nodes and edges for IO
/*
    First pass: create Dot language for SE Input and SE Output nodes and edges
*/
Item io_nodes = res2.getItemsByXPath("//Item[@type='SE Input']|//Item[@type='SE Output']");
// show SECIs and edges only once, keep track of secis and edges created
List<string> secis = new List<string>();
List<string> edges = new List<string>();

for (int i = 0; i < io_nodes.getItemCount(); i++)
{
    // Just get Input/Output data in first passs, set seci_id, data_options , this_type, this_id in second pass  
    // Do set fill, its easier to do here, and will not change
    Item this_io = io_nodes.getItemByIndex(i);
    string source_id = this_io.getProperty("source_id");
    string node_id = this_io.getID();
    string this_node_type = this_io.getType();
    string se_controlled_item_id = this_io.getProperty("se_controlled_item_id"); 
    string this_node_fill = ((String.IsNullOrEmpty(se_controlled_item_id))) ? "lightgray" : "lightblue1";
    string keyed_name = this_io.getPropertyAttribute("se_io_id","keyed_name");
    keyed_name = keyed_name.Replace(" ","\r\n"); // Split IO keyed name by space, make shape narrow
    string nickname = this_io.getPropertyAttribute("se_controlled_item_id","keyed_name","(No SECI)");
    Item this_controlled_item = this_io.getPropertyItem("se_controlled_item_id");
    string name = (null == this_controlled_item)  ? "" : this_controlled_item.getProperty("name");
    string this_node = $"x{node_id} [shape=parallelogram,style=filled,fontname=\"Segoe UI\",fillcolor={this_node_fill},label=\"{keyed_name}\r\n{nickname}\r\n{name}\"]\r\n"; // create dot for node
    string node_from, node_to;
    //string xpath_1 = "//Item[(@type='SE Input' or @type='SE Output')  and not(@id='" + node_id + "')][se_controlled_item_id/Item[@id='" + se_controlled_item_id + "']]";
    string xpath_1 = "//Item[(@type='SE Input' or @type='SE Output')][se_controlled_item_id/Item[@id='" + se_controlled_item_id + "']]";
    node_from = node_to = "";
    // Take 3 
    //if (System.Diagnostics.Debugger.Launch()) System.Diagnostics.Debugger.Break();
    if (String.IsNullOrEmpty(se_controlled_item_id)){
        // this is an empty Input/Output
        // show it on its own with edge to Process
        if ("SE Output" == this_io.getType())
        {
            node_from = source_id;
            node_to = node_id;
        }
        else
        {
            node_from = node_id;
            node_to = source_id;
        }
        string this_edge = $"x{node_from} -> x{node_to}\r\n";
        dot.Append(this_node);
        dot.Append(this_edge);
    }
    else {
        // this is a SECI
        // get all SECIs in io_nodes
       
        Item seci_nodes = io_nodes.getItemsByXPath(xpath_1);
        // always returns a nodelist
        int seci_nodes_ct = seci_nodes.getItemCount();

        if (!secis.Contains(se_controlled_item_id)){
            // create a new seci node
            keyed_name = "Open Process to see Input/Output Types"; // suppress IO kn
            this_node = $"x{se_controlled_item_id} [shape=parallelogram,style=filled,fontname=\"Segoe UI\",fillcolor={this_node_fill},label=\"{keyed_name}\r\n{nickname}\r\n{name}\"]\r\n"; // create dot for node
            dot.Append(this_node);
            secis.Add(se_controlled_item_id);
        }
        // now create edges for this seci to its processes
        for (int j = 0; j < seci_nodes_ct; j++) {
            // for each seci_node in  seci_nodes
            Item this_seci = seci_nodes.getItemByIndex(j);
            if ("SE Output" == this_seci.getType()) {
                node_from = this_seci.getProperty("source_id");
                node_to = se_controlled_item_id;
            }
            else {
                node_from = se_controlled_item_id;
                node_to =this_seci.getProperty("source_id");
            }
            string this_edge = $"x{node_from} -> x{node_to}\r\n";
            if (!edges.Contains(this_edge)){
                dot.Append(this_edge);
                edges.Add(this_edge);
            }
        }

    }     
}
string dot_string = "digraph g{rankdir=TB;bgcolor=azure;fontname=\"Segoe UI\"\r\n" + dot.ToString()  + "}";
dot_string = dot_string.Replace("&gt;",">"); // decode right angle bracket

// step 4 return svg for thread diagram
string body = "<body><dot>" + dot_string +  "</dot></body>";
string svgString =  innov.applyMethod("Dot2Svg",body).getResult();

// if (System.Diagnostics.Debugger.Launch()) System.Diagnostics.Debugger.Break();
// Parse SVG string into an XML document
System.Xml.Linq.XDocument xmlDoc = System.Xml.Linq.XDocument.Parse(svgString);

/* 
    Second pass update svg
    Select all elements with class="node"
*/
var nodes = xmlDoc.Descendants().Where(e => (string)e.Attribute("class") == "node");
System.Xml.Linq.XNamespace svg = "http://www.w3.org/2000/svg";

foreach (var el in nodes)
{
    string nodeId = (string)el.Element(svg + "title");
    nodeId = nodeId.Replace("x", "");
    string nodeType = ""; // will be populated below

    // --- 1. Assume SE Process first ---
    Item res = itemExists("SE Process", nodeId, "state");
    if (res != null)
    {
        nodeType = "SE Process";
        if (res.getProperty("state") == "Preliminary")
            el.SetAttributeValue("data-options", "1");
        else
            el.SetAttributeValue("data-options", "2");
    }
    else
    {
        // --- 2. Otherwise try SE Input ---
        res = itemExists("SE Input", nodeId, "se_controlled_item_id");
        if (res != null)
        {
            nodeType = "SE Input";
            if (res.getPropertyAttribute("se_controlled_item_id", "is_null") == "1")
            {
                el.SetAttributeValue("data-options", "3");
                el.SetAttributeValue("seci_id", "");
            }
            else
            {
                el.SetAttributeValue("data-options", "4");
                el.SetAttributeValue("seci_id", res.getProperty("se_controlled_item_id"));
            }
        }
        else
        {
            // --- 3. Otherwise try SE Output ---
            res = itemExists("SE Output", nodeId, "se_controlled_item_id");
            if (res != null)
            {
                nodeType = "SE Output";
                if (res.getPropertyAttribute("se_controlled_item_id", "is_null") == "1")
                {
                    el.SetAttributeValue("data-options", "3");
                    el.SetAttributeValue("seci_id", "");
                }
                else
                {
                    el.SetAttributeValue("data-options", "4");
                    el.SetAttributeValue("seci_id", res.getProperty("se_controlled_item_id"));
                }
            }
            else {
                // --- 4. Otherwise try SE Controlled Item ---
                // <g id="node5" class="node" data-options="4" seci_id="4219ED442B754E7EA8D4CEEF154DB99F" this_type="SE Input" this_id="11DB4CE691794B4A83B38E65BE1F025D">
                res = itemExists("SE Controlled Item", nodeId, "id");
                if (res != null)
                {
                    nodeType = "SE Controlled Item";
                    el.SetAttributeValue("data-options", "4");
                    el.SetAttributeValue("seci_id", nodeId);
                }
            }
        }
    }

    // --- 5. Always assign universal attributes ---
    el.SetAttributeValue("this_type", nodeType);
    el.SetAttributeValue("this_id", nodeId);
}
 // dangling brace to enable enclosed method
// Serialize back to string
return innov.newResult(xmlDoc.ToString(System.Xml.Linq.SaveOptions.DisableFormatting));]]></method_code>
  <method_type>C#</method_type>
  <name>SystemReportServer</name>
 </Item>
</AML>